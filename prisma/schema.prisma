generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Pokemon {
  id           Int    @id
  name         String
  profileImage String @db.Text
  flavorTexts  String @db.Text
  typesJson    String @db.Text

  bot  Boolean @default(false)
  user User?

  posts Post[]

  comments Comment[]

  likes Like[]

  followers Pokemon[] @relation("Followers")
  follows   Pokemon[] @relation("Followers")

  friends  Pokemon[] @relation("Friends")
  friendOf Pokemon[] @relation("Friends")

  sentFriendRequests     FriendRequest[] @relation("SentRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedRequests")
}

model Post {
  id        String   @id @default(uuid())
  content   String   @db.Text
  createdAt DateTime @default(now())

  posterId Int
  poster   Pokemon @relation(fields: [posterId], references: [id], onDelete: Cascade)

  comments Comment[]
  likes    Like[]

  @@unique([createdAt, id])
  @@index([posterId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String   @db.Text
  createdAt DateTime @default(now())

  posterId Int
  poster   Pokemon @relation(fields: [posterId], references: [id])

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([posterId])
  @@index([postId])
}

model Like {
  createdAt DateTime @default(now())

  creatorId Int
  creator   Pokemon @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([creatorId, postId])
  @@index([creatorId])
  @@index([postId])
}

model FriendRequest {
  senderId Int
  sender   Pokemon @relation("SentRequests", fields: [senderId], references: [id], onDelete: Cascade)

  receiverId Int
  receiver   Pokemon @relation("ReceivedRequests", fields: [receiverId], references: [id], onDelete: Cascade)

  @@id([senderId, receiverId])
  @@index([senderId])
  @@index([receiverId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  pokemonId     Int?      @unique
  profileImage  String?
  accounts      Account[]
  sessions      Session[]

  // Extensions
  pokemon Pokemon? @relation(fields: [pokemonId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
