generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Pokemon {
    id           Int    @id
    name         String
    profileImage String @db.Text
    flavorTexts  String @db.Text

    user User?
}

model Post {
    id        String   @id @default(uuid())
    content   String   @db.Text
    createdAt DateTime @default(now())

    user   User   @relation(fields: [userId], references: [id])
    userId String

    @@unique([createdAt, id])
    @@index([userId])
}

model User {
    // Next Auth reqs
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    // Extensions
    pokemon      Pokemon? @relation(fields: [pokemonId], references: [id])
    pokemonId    Int?     @unique
    profileImage String?

    posts Post[]
}

// Necessary for Next Auth...
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index(userId)
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index(userId)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
